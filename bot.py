import os
import requests
import folium
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message,
    FSInputFile,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å BOT_TOKEN –∏–∑ .env —Ñ–∞–π–ª–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()


def get_ip_info(ip: str = '127.0.0.1') -> tuple[dict | None, str | None]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP-–∞–¥—Ä–µ—Å–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É."""
    try:
        response = requests.get(f'http://ip-api.com/json/{ip}', timeout=10).json()

        if response.get('status') == 'fail':
            return None, response.get('message', 'Unknown error')

        data = {
            'IP': response.get('query'),
            '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä': response.get('isp'),
            '–°—Ç—Ä–∞–Ω–∞': response.get('country'),
            '–†–µ–≥–∏–æ–Ω': response.get('regionName'),
            '–ì–æ—Ä–æ–¥': response.get('city'),
            '–ò–Ω–¥–µ–∫—Å': response.get('zip'),
            '–®–∏—Ä–æ—Ç–∞': response.get('lat'),
            '–î–æ–ª–≥–æ—Ç–∞': response.get('lon')
        }

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if response.get('lat') and response.get('lon'):
            area = folium.Map(
                location=[response['lat'], response['lon']],
                zoom_start=12
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            folium.Marker(
                [response['lat'], response['lon']],
                popup=response.get('city', 'Unknown location')
            ).add_to(area)

            map_filename = f"ip_map_{response['query']}.html"
            area.save(map_filename)
            return data, map_filename

        return data, None

    except requests.exceptions.RequestException as e:
        return None, f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}'
    except Exception as e:
        return None, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'


@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ú–æ–π IP"))
    builder.add(KeyboardButton(text="–ü–æ–º–æ—â—å"))

    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP-–∞–¥—Ä–µ—Å–∞—Ö.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
    )


@dp.message(lambda message: message.text and message.text.lower() == "–ø–æ–º–æ—â—å")
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    help_text = (
        "<b>üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ <i>IPv4-–∞–¥—Ä–µ—Å</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8.8.8.8)\n"
        "2. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'–ú–æ–π IP'</b>\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø—Ä–∏—à–ª—é –∫–∞—Ä—Ç—É.\n"
        "–ö–∞—Ä—Ç—É –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ü–ö –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ"
    )
    await message.answer(help_text, reply_markup=ReplyKeyboardRemove())


@dp.message(lambda message: message.text and message.text.lower() == "–º–æ–π ip")
async def cmd_my_ip(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π IP'."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        ip_response = requests.get('https://api.ipify.org?format=json', timeout=5).json()
        user_ip = ip_response.get('ip')

        if user_ip:
            await process_ip_request(message, user_ip)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à IP-–∞–¥—Ä–µ—Å.")
    except requests.exceptions.RequestException:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à IP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é."
        )


@dp.message(lambda message: message.text and is_valid_ip(message.text))
async def process_ip(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–∞."""
    await process_ip_request(message, message.text.strip())


def is_valid_ip(ip: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º IPv4 –∞–¥—Ä–µ—Å–æ–º."""
    parts = ip.split('.')
    if len(parts) != 4:
        return False

    try:
        return all(0 <= int(part) <= 255 for part in parts)
    except ValueError:
        return False


async def process_ip_request(message: Message, ip: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP."""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(message.chat.id, "typing")

    data, map_filename = get_ip_info(ip)

    if data is None:
        await message.answer(f"‚ùå {map_filename}")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ HTML
    info_text = "<b>üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP:</b>\n\n" + \
                "\n".join(f"<b>{k}:</b> <code>{v}</code>" for k, v in data.items())

    if map_filename:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–∞—Ä—Ç—É
            await message.answer(info_text)
            await message.answer_document(
                FSInputFile(map_filename),
                caption="üìç –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if os.path.exists(map_filename):
                os.remove(map_filename)
    else:
        await message.answer(info_text + "\n\n‚ö† <i>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ IP</i>")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
